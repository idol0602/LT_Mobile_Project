import { LemurSummaryParams, LemurActionItemsParams, LemurQuestionAnswerParams, LemurTaskParams, LemurSummaryResponse, LemurQuestionAnswerResponse, LemurActionItemsResponse, LemurTaskResponse, PurgeLemurRequestDataResponse, LemurResponse } from "../..";
import { BaseService } from "../base";
export declare class LemurService extends BaseService {
    summary(params: LemurSummaryParams, signal?: AbortSignal): Promise<LemurSummaryResponse>;
    questionAnswer(params: LemurQuestionAnswerParams, signal?: AbortSignal): Promise<LemurQuestionAnswerResponse>;
    actionItems(params: LemurActionItemsParams, signal?: AbortSignal): Promise<LemurActionItemsResponse>;
    task(params: LemurTaskParams, signal?: AbortSignal): Promise<LemurTaskResponse>;
    /**
     * Retrieve a LeMUR response that was previously generated.
     * @param id - The ID of the LeMUR request you previously made. This would be found in the response of the original request.
     * @param signal - Optional AbortSignal to cancel the request
     * @returns The LeMUR response.
     */
    getResponse<T extends LemurResponse>(id: string, signal?: AbortSignal): Promise<T>;
    getResponse(id: string, signal?: AbortSignal): Promise<LemurResponse>;
    /**
     * Delete the data for a previously submitted LeMUR request.
     * @param id - ID of the LeMUR request
     * @param signal - Optional AbortSignal to cancel the request
     */
    purgeRequestData(id: string, signal?: AbortSignal): Promise<PurgeLemurRequestDataResponse>;
}
